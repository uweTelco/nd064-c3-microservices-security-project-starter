Docker Threat Modeling

Spoofing:

Threat: Unauthorized access to Docker Daemon.
Description: The Docker Daemon is responsible for managing containers on a host. If authentication mechanisms are weak or improperly configured, an attacker could spoof their identity to gain unauthorized access to the Docker Daemon, potentially allowing them to manipulate or control containers.

Tampering:
Threat: Manipulation of Docker images.
Description: Docker images are used to instantiate containers. An attacker could tamper with these images either at rest or in transit, injecting malicious code or altering the functionality of the application within the container. This could lead to compromised application behavior.

Repudiation:
Threat: Lack of auditing and logging in Docker operations.
Description: If Docker does not properly log and audit actions taken by users and processes, it can be difficult to track changes or identify malicious activities. This lack of accountability can lead to repudiation threats where malicious actions go untraced.

Information Disclosure:
Threat: Exposure of sensitive data via Docker volumes.
Description: Docker volumes are used to persist data generated by containers. If these volumes are improperly configured, sensitive data might be exposed to unauthorized users or containers, leading to information disclosure.

Elevation of Privilege:
Threat: Privilege escalation via insecure container configurations.
Description: Containers often run with certain privileges, and if not appropriately restricted, a vulnerability or misconfiguration could allow an attacker to escalate their privileges within the container or even gain access to the host system.

Kubernetes Threat Modeling
Spoofing:
Attack Surface: Kubernetes API Server Authentication: An attacker could attempt to spoof an identity by exploiting weaknesses in the authentication mechanisms. If the API server accepts credentials that are not properly validated, an attacker could impersonate a legitimate user or service account to gain unauthorized access to the cluster.
Threat: This could lead to unauthorized actions being performed, compromising the integrity and security of the cluster.

Tampering:
Attack Surface: etcd Data Store: etcd is the primary data store for Kubernetes, holding the entire state of the cluster. If an attacker gains access to etcd, they could tamper with the stored data, such as configuration settings or secrets.
Threat: Tampering with etcd can lead to altered configurations, potentially redirecting workloads, disrupting services, or exposing sensitive data.

Repudiation:
Attack Surface: Logging and Audit Logs: Kubernetes components generate logs that record actions taken within the cluster. If log integrity and authenticity are not maintained, an attacker could delete or modify logs to cover their tracks.
Threat: Without reliable logging, it can be challenging to trace malicious activities or enforce accountability, making it difficult to assess the impact of an intrusion or respond appropriately.

Information Disclosure:
Attack Surface: Kubernetes Secrets Management: Kubernetes uses secrets to store sensitive information such as passwords, tokens, and keys. If these secrets are not adequately protected (e.g., through encryption), an attacker could access them and disclose sensitive information.
Threat: Disclosure of secrets could lead to unauthorized access to applications, databases, or other services, potentially resulting in data breaches.

Denial of Service (DoS):
Attack Surface: Kubernetes API Server: The API server is the central management component of Kubernetes and handles requests from users and other components. An attacker could overwhelm the API server with a flood of requests, leading to a denial of service.
Threat: A successful DoS attack could make the Kubernetes control plane unavailable, preventing legitimate users from managing their applications, which can lead to service outages.

Docker-bench Run Results and Analysis
From the failed findings, select and document 3 findings from the Docker-bench results that you want to harden based on the 5 attack surface areas you identified in Step 1. At least 1 of the 3 hardened findings should be different from the ones mentioned in the exercise (i.e. 5.10, 5.14, and 5.22).
 2.15 Ensure live restore is Enabled 
 2.16 Ensure Userland Proxy is Disabled
 3.17 Ensure daemon.json file ownership is set to root:root